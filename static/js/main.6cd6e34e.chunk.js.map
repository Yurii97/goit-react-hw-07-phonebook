{"version":3,"sources":["components/Filter/Filter.styled.jsx","redux/contacts/contacts-actions.js","components/Filter/Filter.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","services/contacts-api.js","App.js","redux/contacts/contacts-operation.js","redux/contacts/contacts-reduser.js","redux/store.js","index.js"],"names":["FilterInput","styled","label","addContact","createAction","removeContact","filterAct","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","Filter","filter","useSelector","state","contacts","dispatch","useDispatch","type","name","value","onChange","e","target","pattern","title","ButtonStyled","button","Contact","id","number","deleteContact","onClick","ListStyled","ul","ContactList","toast","success","length","contact","toLowerCase","includes","map","FormStyled","form","ContactForm","useState","setName","setNumber","handleChange","addNewContact","newContact","some","error","onSubmit","preventDefault","nanoid","required","fetchContacts","a","axios","get","resp","data","defaults","baseURL","App","useEffect","contactsAction","contactsAPI","localContacts","localStorage","getItem","JSON","parse","createReducer","_","payload","loading","combineReducers","store","configureStore","reducer","contactsReduser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAEaA,EAAcC,IAAOC,MAAV,0F,cCAXC,EAAaC,YAAa,gBAC1BC,EAAgBD,YAAa,mBAC7BE,EAAYF,YAAa,mBAEzBG,EAAuBH,YAClC,iCAEWI,EAAuBJ,YAClC,iCAEWK,EAAqBL,YAAa,+B,GAEVA,YACnC,kCAEmCA,YACnC,kCAEiCA,YAAa,gCAEdA,YAAa,+BACbA,YAAa,+BACfA,YAAa,6B,MCpB9B,SAASM,IACtB,IAAOC,EAAUC,aAAY,SAAAC,GAAK,OAAEA,EAAMC,YAAnCH,OACDI,EAASC,cAMf,OACE,mCACE,eAAChB,EAAD,mCAEE,uBACEiB,KAAK,OACLC,KAAK,SACLC,MAAOR,EACPS,SAZmB,SAAAC,GACzB,IAAMF,EAAQE,EAAEC,OAAOH,MACvBJ,EAAST,EAAUa,KAWbI,QAAQ,yHACRC,MAAM,gJCpBT,I,EAAMC,EAAexB,IAAOyB,OAAV,8HCAV,SAASC,EAAT,GAAuD,IAApCC,EAAmC,EAAnCA,GAAIV,EAA+B,EAA/BA,KAAMW,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,cAClD,OACE,qCACE,iCACGZ,EADH,MACYW,KAEZ,cAACJ,EAAD,CAAcR,KAAK,SAASc,QAAS,kBAAMD,EAAcF,IAAzD,uBCNC,IAAMI,EAAa/B,IAAOgC,GAAV,iECIR,SAASC,IACtB,MAA2BtB,aAAY,SAAAC,GAAK,OAAEA,EAAMC,YAA7CA,EAAP,EAAOA,SAAUH,EAAjB,EAAiBA,OACXI,EAAWC,cAEXc,EAAe,SAACF,GACpBb,EAASV,EAAcuB,IACvBO,IAAMC,QAAQ,uBAEhB,OACE,mCACE,kCACE,cAACJ,EAAD,UACGlB,EAASuB,OAAO,GAAKvB,EACnBH,QAAO,SAAA2B,GAAO,OACbA,EAAQpB,KAAKqB,cAAcC,SAAS7B,EAAO4B,kBAE5CE,KAAI,gBAAGb,EAAH,EAAGA,GAAIV,EAAP,EAAOA,KAAMW,EAAb,EAAaA,OAAb,OACH,6BACE,cAACF,EAAD,CACEC,GAAIA,EACJV,KAAMA,EACNW,OAAQA,EACRC,cAAeA,KALVF,Y,sBCrBVc,EAAazC,IAAO0C,KAAV,0WCKR,SAASC,IACtB,MAAwBC,mBAAS,IAAjC,mBAAO3B,EAAP,KAAa4B,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOhB,EAAP,KAAekB,EAAf,KACMjC,EAAWF,aAAY,SAAAC,GAAK,OAAEA,EAAMC,SAASA,YAC7CC,EAAWC,cAEXgC,EAAe,SAAA3B,GACnB,MAAwBA,EAAEC,OAAlBJ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,OAAQD,GACN,IAAK,OACH4B,EAAQ3B,GACR,MACF,IAAK,SACH4B,EAAU5B,GACV,MACF,QACE,SAgBA8B,EAAgB,SAAAC,GAElBpC,EAASqC,MACP,SAAAb,GAAO,OAAIA,EAAQpB,KAAKqB,gBAAkBW,EAAWhC,KAAKqB,iBAG5DJ,IAAMiB,MAAM,0CAGdrC,EAASZ,EAAW+C,IACpBf,IAAMC,QAAQ,mBAGhB,OACE,mCACE,eAACM,EAAD,CAAYW,SA3BG,SAAAhC,GACjBA,EAAEiC,iBACF,IAAMJ,EAAa,CACjBtB,GAAI2B,cACJrC,OACAW,UAEFoB,EAAcC,GACdH,EAAU,IACVD,EAAQ,KAkBN,UACE,yCAEE,uBACE7B,KAAK,OACLC,KAAK,OACLE,SAAU4B,EACV7B,MAAOD,EACPK,QAAQ,yHACRC,MAAM,yIACNgC,UAAQ,OAGZ,2CAEE,uBACEvC,KAAK,MACLC,KAAK,SACLE,SAAU4B,EACV7B,MAAOU,EACPN,QAAQ,yFACRC,MAAM,+FACNgC,UAAQ,OAGZ,wBAAQvC,KAAK,SAAb,8B,6CC1ED,SAAewC,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEACcC,IAAMC,IAAI,aADxB,cACCC,EADD,yBAEEA,EAAKC,MAFP,4C,sBAHPH,IAAMI,SAASC,QACb,8CCwBaC,I,IAAAA,EAnBf,WACE,IAAMlD,EAAWC,cAMjB,OAJAkD,qBAAU,WACRnD,ECTyB,uCAAM,WAAMA,GAAN,eAAA2C,EAAA,6DACjC3C,EAASoD,KADwB,SAGVC,IAHU,OAG3BtD,EAH2B,OAIjC,IACEC,EAASoD,EAAoCrD,IAC7C,MAAOsC,GACPrC,EAASoD,EAAkCf,IAPZ,2CAAN,yDDUxB,IAGD,qCACE,cAAC,IAAD,IACA,2CACA,cAACR,EAAD,IACA,0CACA,cAAClC,EAAD,IACA,cAACwB,EAAD,Q,cEhBAmC,EAAgBC,aAAaC,QAAQ,YAoBrCzD,GAnBgB0D,KAAKC,MAAMJ,GAmBhBK,YAAc,GAAD,eAC3BP,GAAsC,SAACQ,EAAD,YAAMC,aAIzCjE,EAAS+D,YAAc,GAAD,eACzBP,GAA2B,SAACQ,EAAD,YAAMC,YAG9BC,EAAUH,aAAc,GAAD,mBAC1BP,GAAsC,kBAAM,KADlB,cAE1BA,GAAsC,kBAAM,KAFlB,cAG1BA,GAAoC,kBAAM,KAHhB,IAMvBf,EAAQsB,YAAc,MAAD,mBACxBP,GAAoC,SAACQ,EAAD,YAAMC,WADlB,cAGxBT,GAAsC,kBAAM,QAHpB,IAMZW,cAAgB,CAC7BhE,WACAH,SACAkE,UACAzB,UC/CW2B,EAAQC,YAAe,CAClCC,QAAS,CACPnE,SAAUoE,KCCdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACA,cAAC,EAAD,QAGFO,SAASC,eAAe,W","file":"static/js/main.6cd6e34e.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const FilterInput = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 250px;\r\n`;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContact = createAction('contacts/add');\r\nexport const removeContact = createAction('contacts/delete');\r\nexport const filterAct = createAction('contacts/filter');\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest'\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess'\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const deleteContactsRequest = createAction(\r\n  'contacts/deleteContactsRequest'\r\n);\r\nexport const deleteContactsSeccess = createAction(\r\n  'contacts/deleteContactsSeccess'\r\n);\r\nexport const deleteContactsError = createAction('contacts/deleteContactsError');\r\n\r\nexport const addContactsRequest = createAction('contacts/addContactsRequest');\r\nexport const addContactsSuccess = createAction('contacts/addContactsSuccess');\r\nexport const addContactsError = createAction('contacts/addContactsError');\r\n","import { FilterInput } from './Filter.styled';\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport {filterAct} from '../../redux/contacts/contacts-actions.js'\r\n\r\nexport default function Filter() {\r\n  const {filter} = useSelector(state=>state.contacts)\r\n  const dispatch=useDispatch();\r\n  \r\n  const handleChangeFilter = e => {\r\n    const value = e.target.value;\r\n    dispatch(filterAct(value));\r\n  };\r\n  return (\r\n    <>\r\n      <FilterInput>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={filter}\r\n          onChange={handleChangeFilter}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        />\r\n      </FilterInput>\r\n    </>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ButtonStyled = styled.button`\r\n  margin-left: 25px;\r\n  :hover,\r\n  :focus {\r\n    background-color: blue;\r\n    color: white;\r\n  }\r\n`;\r\n","import { ButtonStyled } from './Contact.styled';\r\n\r\nexport default function Contact({ id, name, number, deleteContact }) {\r\n  return (\r\n    <>\r\n      <span>\r\n        {name} : {number}\r\n      </span>\r\n      <ButtonStyled type=\"button\" onClick={() => deleteContact(id)}>\r\n        Delete\r\n      </ButtonStyled>\r\n    </>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ListStyled = styled.ul`\r\n  & li {\r\n    margin-top: 7px;\r\n  }\r\n`;\r\n","import Contact from '../Contact/Contact';\r\nimport { ListStyled } from './ContactList.styled';\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport {removeContact} from '../../redux/contacts/contacts-actions'\r\nimport toast from 'react-hot-toast';\r\n\r\nexport default function ContactList() {\r\n  const {contacts, filter} = useSelector(state=>state.contacts)\r\n  const dispatch = useDispatch();\r\n  \r\n  const deleteContact =(id)=>{\r\n    dispatch(removeContact(id))\r\n    toast.success('delete is complete');\r\n  }\r\n  return (\r\n    <>\r\n      <section>\r\n        <ListStyled>\r\n          {contacts.length>0 && contacts\r\n            .filter(contact =>\r\n              contact.name.toLowerCase().includes(filter.toLowerCase())\r\n            )\r\n            .map(({ id, name, number }) => (\r\n              <li key={id}>\r\n                <Contact\r\n                  id={id}\r\n                  name={name}\r\n                  number={number}\r\n                  deleteContact={deleteContact}\r\n                />\r\n              </li>\r\n            ))}\r\n        </ListStyled>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const FormStyled = styled.form`\r\n  /* display: flex;\r\n  flex-direction: column; */\r\n  padding: 20px;\r\n  width: 300px;\r\n  border: 1px solid black;\r\n\r\n  & label {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 20px;\r\n  }\r\n  & button {\r\n    margin-top: 20px;\r\n    :hover,\r\n    :focus {\r\n      background-color: blue;\r\n      color: white;\r\n    }\r\n  }\r\n`;\r\n","import { useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { FormStyled } from './ContactForm.styled';\r\nimport toast from 'react-hot-toast';\r\nimport {  useDispatch, useSelector } from 'react-redux'\r\nimport {addContact} from '../../redux/contacts/contacts-actions'\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(state=>state.contacts.contacts)\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const submitForm = e => {\r\n    e.preventDefault();\r\n    const newContact = {\r\n      id: nanoid(),\r\n      name,\r\n      number,\r\n    };\r\n    addNewContact(newContact);\r\n    setNumber('');\r\n    setName('');\r\n  };\r\n\r\n  const addNewContact = newContact => {\r\n    if (\r\n      contacts.some(\r\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\r\n      )\r\n    ) {\r\n      toast.error('contact with such name already exists');\r\n      return;\r\n    }\r\n    dispatch(addContact(newContact));\r\n    toast.success('contact added');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormStyled onSubmit={submitForm}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={handleChange}\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            onChange={handleChange}\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </FormStyled>\r\n    </>\r\n  );\r\n}\r\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL =\r\n  'https://62056a28161670001741bb7d.mockapi.io';\r\n\r\nexport async function fetchContacts() {\r\n  const resp = await axios.get('/contacts');\r\n  return resp.data;\r\n}\r\n\r\nexport async function addContacts() {\r\n  const resp = await axios.get('/contacts');\r\n  return resp;\r\n}\r\n\r\nexport async function deleteContacts(id) {\r\n  const resp = await axios.get(`/contacts/${id}`);\r\n  return resp;\r\n}\r\n","import { useEffect } from 'react';\r\nimport { Toaster } from 'react-hot-toast';\r\nimport Filter from './components/Filter/Filter';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as contactsOperation from './redux/contacts/contacts-operation';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperation.fetchContacts());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Toaster />\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import * as contactsAction from './contacts-actions';\r\nimport * as contactsAPI from '../../services/contacts-api';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(contactsAction.fetchContactsRequest());\r\n\r\n  const contacts = await contactsAPI.fetchContacts();\r\n  try {\r\n    dispatch(contactsAction.fetchContactsSuccess(contacts));\r\n  } catch (error) {\r\n    dispatch(contactsAction.fetchContactsError(error));\r\n  }\r\n};\r\n","import {\r\n  createReducer,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport * as contactsAction from './contacts-actions';\r\n\r\nconst localContacts = localStorage.getItem('contacts');\r\nconst parseContacts = JSON.parse(localContacts);\r\nconst refLocalStorage = arr =>\r\n  localStorage.setItem('contacts', JSON.stringify(arr));\r\n\r\n// const contacts = createReducer(parseContacts ?? [], {\r\n//   [contactsAction.addContact]: (state, { payload }) => {\r\n//     const refContacts = [payload, ...state];\r\n//     refLocalStorage(refContacts);\r\n//     return refContacts;\r\n//   },\r\n//   [contactsAction.removeContact]: (state, { payload }) => {\r\n//     const refContacts = state.filter(\r\n//       ({ id }) => id !== payload\r\n//     );\r\n//     refLocalStorage(refContacts);\r\n//     return refContacts;\r\n//   },\r\n// });\r\n\r\nconst contacts = createReducer([], {\r\n  [contactsAction.fetchContactsSuccess]: (_, { payload }) =>\r\n    payload,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactsAction.filterAct]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsAction.fetchContactsRequest]: () => true,\r\n  [contactsAction.fetchContactsSuccess]: () => true,\r\n  [contactsAction.fetchContactsError]: () => true,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [contactsAction.fetchContactsError]: (_, { payload }) =>\r\n    payload,\r\n  [contactsAction.fetchContactsRequest]: () => null,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport contactsReduser from './contacts/contacts-reduser'\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReduser,\r\n},\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(  \n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}